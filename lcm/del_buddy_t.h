// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>

#ifndef _del_buddy_t_h
#define _del_buddy_t_h

#ifdef __cplusplus
extern "C" {
#endif

#define DEL_BUDDY_T_MSG_ID 7

typedef struct _del_buddy_t del_buddy_t;
struct _del_buddy_t
{
    int32_t    my_id;
    int32_t    buddy_id;
};

/**
 * Create a deep copy of a del_buddy_t.
 * When no longer needed, destroy it with del_buddy_t_destroy()
 */
del_buddy_t* del_buddy_t_copy(const del_buddy_t* to_copy);

/**
 * Destroy an instance of del_buddy_t created by del_buddy_t_copy()
 */
void del_buddy_t_destroy(del_buddy_t* to_destroy);

/**
 * Encode a message of type del_buddy_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to del_buddy_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int del_buddy_t_encode(void *buf, int offset, int maxlen, const del_buddy_t *p);

/**
 * Decode a message of type del_buddy_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with del_buddy_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int del_buddy_t_decode(const void *buf, int offset, int maxlen, del_buddy_t *msg);

/**
 * Release resources allocated by del_buddy_t_decode()
 * @return 0
 */
int del_buddy_t_decode_cleanup(del_buddy_t *p);

/**
 * Check how many bytes are required to encode a message of type del_buddy_t
 */
int del_buddy_t_encoded_size(const del_buddy_t *p);

// LCM support functions. Users should not call these
int64_t __del_buddy_t_get_hash(void);
uint64_t __del_buddy_t_hash_recursive(const __lcm_hash_ptr *p);
int     __del_buddy_t_encode_array(void *buf, int offset, int maxlen, const del_buddy_t *p, int elements);
int     __del_buddy_t_decode_array(const void *buf, int offset, int maxlen, del_buddy_t *p, int elements);
int     __del_buddy_t_decode_array_cleanup(del_buddy_t *p, int elements);
int     __del_buddy_t_encoded_array_size(const del_buddy_t *p, int elements);
int     __del_buddy_t_clone_array(const del_buddy_t *p, del_buddy_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
